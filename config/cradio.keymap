#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "mouse.dtsi"

// Layer defines for main layers
#define DEF 0
#define HRM 1
#define NUM 2
#define NAV 3
#define SYM 4
#define FUN 5
#define MOU 6

// Layer defines for gaming layers
#define AOE 7
#define AGS 8
#define ABS 9

// Shortcuts for shorthand keymap definitions
#define HYPER LG(LA(LS(LCTRL)))
#define P_TAB LS(LC(TAB))
#define N_TAB LC(TAB)
#define UNDO LG(Z)
#define CUT LG(X)
#define COPY LG(C)
#define PASTE LG(V)
#define HOMEROW LS(LG(SPACE))
#define B_BACK LG(LBKT)
#define B_FWRD LG(RBKT)
#define LOGOUT LG(LC(Q))
#define P_DESKTOP LC(LEFT)
#define N_DESKTOP LC(RIGHT)
#define EXPOSE LC(UP)

// Behavior tweaks
&sk {
	quick-release;// Avoids "THis" problem (double capitalization)
	release-after-ms = <86400000>;// Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&mt { flavor = "balanced"; };

&caps_word {
	continue-list = <UNDERSCORE MINUS BACKSPACE DELETE K_CANCEL LSHFT SQT CARET TILDE GRAVE>;// separators + K_CANCEL for &lc macro + LSHFT for PT-BR diacriticals. This makes RSHFT a better thumb key that will &caps_word.
	/delete-property/ ignore-modifiers;
};

&num_word {// Requires urob's auto-layer module https://github.com/urob/zmk-auto-layer
	continue-list = <LPAR RPAR LBKT RBKT LBRC RBRC TAB DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL BACKSPACE DEL>;
	ignore-modifiers;
};

/ {
	combos {
		compatible = "zmk,combos";
		
		left_hand_esc_combo {
			bindings = <&kp ESCAPE>;
			timeout-ms = <35>;
			key-positions = <0 10>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_tab {
			bindings = <&kp TAB>;
			timeout-ms = <35>;
			key-positions = <1 11>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_f18_combo {
			bindings = <&kp F18>;// F18 is handy for using as trigger in Keyboard Maestro for App-Specific macros
			timeout-ms = <35>;
			key-positions = <2 12>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_enter_combo {
			bindings = <&kp ENTER>;
			timeout-ms = <35>;
			key-positions = <3 13>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_backspace {
			bindings = <&kp BSPC>;
			timeout-ms = <35>;
			key-positions = <4 14>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_media_mute_combo {
			key-positions = <14 24>;
			timeout-ms = <35>;
			bindings = <&kp C_MUTE>;
			layers = <NAV>;
		};

		left_hand_toggle_numword_auto_layer {
			key-positions = <13 30>;
			bindings = <&num_word NUM>;
			require-prior-idle-ms = <200>;
		};

		finish_sentence_combo {
			key-positions = <32 33>;
			bindings = <&endstc>;
			layers = <DEF HRM>;
		};
			 
		toggle_sticky_sym_layer_combo {
			bindings = <&sl SYM>;
			key-positions = <24 30>;
			require-prior-idle-ms = <200>;
		};
		
		toggle_nav_layer_combo {
			key-positions = <30 31>;
			bindings = <&tog NAV>;
		};
		
		toggle_mouse_layer_combo {
			key-positions = <23 30>;
			bindings = <&tog MOU>;
		};
        
        toggle_aoe_layers {
            key-positions = <21 22 23>;
            bindings = <&tog AOE>;
        };
		
		toggle_numword_auto_layer {
			key-positions = <26 33>;
			bindings = <&num_word NUM>;
			require-prior-idle-ms = <200>;
		};
		
		numword_punctuation_colon {
			key-positions = <11 21>;
			timeout-ms = <35>;
			bindings = <&kp COLON>;
			require-prior-idle-ms = <200>;
			layers = <NUM>;
		};
		
		numword_punctuation_comma {
			key-positions = <12 22>;
			timeout-ms = <35>;
			bindings = <&kp COMMA>;
			require-prior-idle-ms = <200>;
			layers = <NUM>;
		};
		
		numword_punctuation_dot {
			key-positions = <13 23>;
			bindings = <&kp DOT>;
			require-prior-idle-ms = <200>;
			layers = <NUM>;
		};
		
		sys_bootloader {
			key-positions = <20 21>;
			bindings = <&bootloader>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt0 {
			key-positions = <3 4>;
			bindings = <&bt BT_SEL 0>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt1 {
			key-positions = <13 14>;
			bindings = <&bt BT_SEL 1>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt2 {
			key-positions = <23 24>;
			bindings = <&bt BT_SEL 2>;
			layers = <FUN>;
		};
		
		sys_clear_current_bluetooth_profile {
			key-positions = <28 29>;
			bindings = <&bt BT_CLR>;
			layers = <FUN>;
		};
		
		sys_home_row_mods {
			key-positions = <14 15>;
			bindings = <&tog HRM>;
			layers = <FUN>;
		};
	};
	
	behaviors {
		ml: home-row-mods-left {
			compatible = "zmk,behavior-hold-tap";
			bindings = <&kp>, <&kp>;
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <200>;
			require-prior-idle-ms = <175>;
			flavor = "balanced";
			hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
			hold-trigger-on-release;
		};
		
		mr: home-row-mods-right {
			compatible = "zmk,behavior-hold-tap";
			bindings = <&kp>, <&kp>;
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <200>;
			require-prior-idle-ms = <175>;
			flavor = "balanced";
			hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
			hold-trigger-on-release;
		};
		
		blt: balanced_layer_tap {
			compatible = "zmk,behavior-hold-tap";
			bindings = <&lc>, <&kp>;
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <200>;
			require-prior-idle-ms = <175>;
			flavor = "balanced";
			hold-trigger-on-release;
		};
		
		playnp: play_next_previous_media_key {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <300>;
			bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
		};
		
		shft_cw: shft_caps_word {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			bindings = <&kp RSHFT>, <&caps_word>;
			tapping-term-ms = <300>;
		};

		vb_up: volume_brightness_up {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;
            mods = <(MOD_LCTL)>;
        };

        vb_dn: volume_brightness_down {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;
            mods = <(MOD_LCTL)>;
        };
		
		swapper: swapper_for_cmd_tab {
			compatible = "zmk,behavior-tri-state";// requires tri-state module (https://github.com/urob/zmk-tri-state)
			#binding-cells = <0>;
			bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;
			ignored-key-positions = <7 9 16 17 18 19 29>;// Arrows and BSPC, ENTER and DEL
		};
		
	};
	
	macros {
		lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
			compatible = "zmk,behavior-macro-one-param";
			label = "mo_layer/cancel";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <1>;
			bindings =
			<&macro_tap>,
			<&kp K_CANCEL &macro_param_1to1>,
			<&macro_press>,
			<&mo MACRO_PLACEHOLDER>,
			<&macro_pause_for_release>,
			<&macro_param_1to1>,
			<&macro_release>,
			<&mo MACRO_PLACEHOLDER>;
		};
		
		m2hr: from_mouse_layer_to_def_with_homerow_app_activation {
			compatible = "zmk,behavior-macro";
			label = "from mouse to homerow";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <0>;
			bindings = <&macro_tap>, <&to DEF &kp LG(LS(SPACE))>; // default shortcut for homerow hints (https://www.homerow.app) for faster clicking without a mouse
		};
		
		endstc: finish_sentence_with_period_and_start_a_new_one_with_sticky_shift {
			compatible = "zmk,behavior-macro";
			label = "finish sentences";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <0>;
			bindings = <&macro_tap>, <&kp DOT &kp SPC &sk LSHFT>;
		};
	};
	
	conditional_layers {
		compatible = "zmk,conditional-layers";

		tri_layer_for_function_and_number_keys {
			if-layers = <NAV SYM>;
			then-layer = <FUN>;
		};
	};
	
	keymap {
		compatible = "zmk,keymap";
		
		default_with_home_row_mods {
			bindings = <
			&kp Q 		 &kp W       &kp E        &kp R       &kp T           &kp Y        &kp U       &kp I       &kp O       &kp P
			&ml LCTRL A  &ml LALT S  &ml LSHFT D  &ml LGUI F  &ml HYPER G     &mr HYPER H  &mr RGUI J  &mr RSHFT K &mr RALT L  &mr RCTRL SQT
			&ml GLOBE Z  &kp X       &kp C        &blt MOU V  &kp B           &kp N        &blt NUM M  &kp COMMA   &kp DOT     &kp SEMI
			                                      &lc NAV     &shft_cw        &kp SPACE    &lc SYM
			>;
		};
		
		default_without_home_row_mods {
			bindings = <
			&kp Q        &kp W  &kp E  &kp R    &kp T       &kp Y      &kp U    &kp I      &kp O    &kp P
			&kp A        &kp S  &kp D  &kp F    &kp G       &kp H      &kp J    &kp K      &kp L    &kp SQT
			&ml GLOBE Z  &kp X  &kp C  &kp V    &kp B       &kp N      &kp M    &kp COMMA  &kp DOT  &kp SEMI
                                       &lc NAV  &shft_cw    &kp SPACE  &lc SYM
			>;
		};
		
		numpad {
			bindings = <
			&trans  &kp N7  &kp N8  &kp N9  &trans     		&trans  &trans  &trans     &trans   &trans
			&kp N0  &kp N4  &kp N5  &kp N6  &sl SYM			&trans  &trans  &trans     &trans   &trans
			&trans  &kp N1  &kp N2  &kp N3  &trans			&trans  &trans  &kp COMMA  &kp DOT  &kp COLON
		                        	&mo NAV &kp K_CANCEL	&trans  &lt SYM K_CANCEL
			>;
		};
		
		navigation_editing_and_media_controls {
			bindings = <
			&kp TAB			&swapper	&kp P_TAB	&kp N_TAB		&vb_up		&kp PG_UP  &kp HOME		&kp UP		&kp END		&kp BSPC
			&sk LCTRL		&sk LALT	&sk LSHFT	&sk LGUI		&vb_dn		&kp PG_DN  &kp LEFT		&kp DOWN	&kp RIGHT	&kp RET
			&ml GLOBE UNDO	&kp CUT		&kp COPY	&blt MOU PASTE	&playnp		&kp F18    &kp HOMEROW	&kp B_BACK	&kp B_FWRD  &kp DEL
													&trans			&trans		&trans     &trans
			>;
		};
		
		symbols {
			bindings = <
			&kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp PIPE      &kp AMPS  &kp RPAR  &kp RBKT   &kp RBRC  &kp DQT
			&kp MINUS  &kp CARET  &kp GRAVE  &kp TILDE  &kp DOLLAR    &kp HASH  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
			&kp PLUS   &kp EQUAL  &kp ASTRK  &kp FSLH   &kp PRCNT     &kp AT    &kp BSLH  &kp QMARK  &kp EXCL  &mr GLOBE COLON
			                                 &trans     &kp UNDER     &trans    &trans
			>;
		};
		
		function_and_number_row {
			bindings = <
			&kp N1     &kp N2    &kp N3     &kp N4    &kp N5        &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
			&sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11       &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL 
			&kp F1     &kp F2    &kp F3     &kp F4    &kp F5        &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
			                                &trans    &kp LOGOUT	&kp CAPS  &trans
			>;
		};
		
		mouse_and_editing {
			bindings = <
			&kp ESC			&kp EXPOSE	&kp P_TAB	&kp N_TAB	&kp BSPC	&msc SCRL_DOWN  &msc SCRL_RIGHT  &mmv MOVE_UP	&msc SCRL_LEFT	&kp BSPC
			&kp LCTRL		&kp LALT	&kp LSHFT	&kp LCMD	&kp ENTER	&msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN	&mmv MOVE_RIGHT	&kp ENTER
			&mt GLOBE UNDO	&kp CUT		&kp COPY	&kp PASTE	&kp SPACE	&kp F18         &m2hr			 &kp P_DESKTOP	&kp N_DESKTOP	&mkp MB3
													&tog MOU	&tog MOU	&mkp MB1        &mkp MB2
			>;
		};

        aoe_default_layer {
            bindings = <
            &kp Q        &kp W       &kp E        &kp R        &kp T		&trans  &trans  &trans  &trans  &trans
            &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G		&trans  &trans  &trans  &trans  &trans
            &lt NAV Z    &kp X       &kp C        &kp V        &kp B		&trans  &trans  &trans  &trans  &trans
                                                  &lt AGS H    &lt ABS DOT	&trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
            &kp N1        &kp N2       &kp N3        &kp N4        &kp N5	&trans  &trans  &trans  &trans  &kp BSPC
            &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8  &mt LCTRL N9  &kp N0	&trans  &trans  &trans  &trans  &kp ENTER
            &kp COMMA     &kp BSPC     &kp SPACE     &kp DOT       &kp H	&trans  &trans  &trans  &trans  &trans
                                                     &trans        &kp DEL	&trans  &trans
            >;
        };

        aoe_building_selection {
            bindings = <
            &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LS(COMMA)	&trans  &trans  &trans  &trans  &trans
            &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(LC(D))	&trans  &trans  &trans  &trans  &trans
            &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))	&trans  &trans  &trans  &trans  &trans
                                                         &trans         &trans			&trans  &trans
            >;
        };
	};
};