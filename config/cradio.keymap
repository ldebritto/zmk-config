#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors/num_word.dtsi>
#include "mouse.dtsi"

#define HRM 0
#define DEF 1
#define NUM 2
#define NAV 3
#define SYM 4
#define FUN 5
#define MOU 6
#define AOE 7
#define AGS 8
#define ABS 9
#define NNV 10
#define NSY 11

#define HRML (k1, k2, k3, k4) &ml LCTRL k1  &ml LALT k2		&ml LSHFT k3	&ml LGUI k4
#define HRMR (k1, k2, k3, k4) &mr RGUI k1	&mr RSHFT k2	&mr RALT k3		&mr RCTRL k4

&sk {
	quick-release;// Avoids "THis" problem (double capitalization)
	release-after-ms = <86400000>;// Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&caps_word { // separators + K_CANCEL for &lc macro + LSHFT for PT-BR diacriticals dead keys. This makes RSHFT a thumb key that will &caps_word.
	/delete-property/ ignore-modifiers; // Requires PR#1451 (https://github.com/zmkfirmware/zmk/pull/1451) - currently unmantained but still working
	continue-list = <UNDERSCORE MINUS BACKSPACE DELETE K_CANCEL LSHFT SQT CARET TILDE GRAVE>;
};

&num_word {
  continue-list = <BSPC DEL DOT COMMA FSLH COLON MINUS PLUS ASTRK>;  // do not continue on PLUS, MINUS, STAR, FSLH, EQUAL
};

&mt { flavor = "tap-preferred"; };
&lt { flavor = "hold-preferred"; };

/ {
	combos {
		compatible = "zmk,combos";
		
		left_hand_esc_combo {
			bindings = <&kp ESCAPE>;
			key-positions = <0 10>;
			require-prior-idle-ms = <200>;
		};
				
		left_hand_enter_combo {
			bindings = <&kp ENTER>;
			key-positions = <3 13>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_backspace {
			bindings = <&kp BSPC>;
			key-positions = <4 14>;
			require-prior-idle-ms = <200>;
		};
		
		toggle_nav_layer_combo {
			key-positions = <30 31>;
			bindings = <&tog NAV>;
			layers = <DEF HRM NAV NUM>;
		};
		
		toggle_mouse_layer {
			key-positions = <21 22 23>;
			bindings = <&tog MOU>;
			layers = <DEF HRM NAV NUM MOU>;
		};
		
		toggle_numpad_layer {
			key-positions = <1 2 3>;
			bindings = <&tog NUM>;
			layers = <DEF HRM NUM>;
		};

		toggle_num_word {
			key-positions = <12 30>;
			bindings = <&num_word NUM>;
			layers = <DEF HRM NUM>;
		};

		toggle_aoe_layers {
            key-positions = <20 21 22>;
            bindings = <&tog AOE>;
			layers = <DEF HRM AOE>;
        };

		media_mute_combo {
			key-positions = <27 28>;
			bindings = <&kp C_MUTE>;
			layers = <NAV>;
		};

		sys_bootloader {
			key-positions = <20 21>;
			bindings = <&bootloader>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt0 {
			key-positions = <3 4>;
			bindings = <&bt BT_SEL 0>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt1 {
			key-positions = <13 14>;
			bindings = <&bt BT_SEL 1>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt2 {
			key-positions = <23 24>;
			bindings = <&bt BT_SEL 2>;
			layers = <FUN>;
		};
		
		sys_clear_current_bluetooth_profile {
			key-positions = <28 29>;
			bindings = <&bt BT_CLR>;
			layers = <FUN>;
		};
		
		sys_toggle_home_row_mods {
			key-positions = <14 15>;
			bindings = <&tog 1>;
			layers = <FUN>;
		};
		
		aoe_glhf {
			key-positions = <1 2 3>;
			bindings = <&glhf>;
			layers = <AOE>;
		};
	};
	
	behaviors {
		
		shft_cw: shft_caps_word {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			bindings = <&kp RSHFT>, <&caps_word>;
			tapping-term-ms = <300>;
		};
		
		playnp: play_next_previous_media_key {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <300>;
			bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
		};
		
		vb_up: volume_brightness_up_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;
            mods = <(MOD_LCTL)>;
        };

        vb_dn: volume_brightness_down_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;
            mods = <(MOD_LCTL)>;
        };

		swapper: swapper_for_apple_cmd_tab {
			compatible = "zmk,behavior-tri-state";// requires tri-state module (https://github.com/urob/zmk-tri-state)
			#binding-cells = <0>;
			bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>; // For Windows alt-tab, need to switch to &kt LALT
			ignored-key-positions = <7 9 16 17 18 19 29>;// Arrows and BSPC, ENTER and DEL
		};

		ml: home-row-mods-left { // Using urob's settings which _almost_ eliminates false positives (SA being the most problematic to me).
			compatible = "zmk,behavior-hold-tap";
			bindings = <&kp>, <&kp>;
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <200>;
			require-prior-idle-ms = <175>;
			flavor = "balanced";
			hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
			hold-trigger-on-release;
		};
		
		mr: home-row-mods-right { // Using urob's settings which _almost_ eliminates false positives (SA being the most problematic to me).
			compatible = "zmk,behavior-hold-tap";
			bindings = <&kp>, <&kp>;
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <200>;
			require-prior-idle-ms = <175>;
			flavor = "balanced";
			hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
			hold-trigger-on-release;
		};
		
	};
	
	macros {
		lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
			compatible = "zmk,behavior-macro-one-param";
			label = "mo_layer/cancel";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <1>;
			bindings =
			<&macro_tap>,
			<&kp K_CANCEL &macro_param_1to1>,
			<&macro_press>,
			<&mo MACRO_PLACEHOLDER>,
			<&macro_pause_for_release>,
			<&macro_param_1to1>,
			<&macro_release>,
			<&mo MACRO_PLACEHOLDER>;
		};

		m2hr: from_mouse_layer_to_def_with_homerow_app_activation {
			compatible = "zmk,behavior-macro";
			label = "from mouse to homerow";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <0>;
			bindings = <&macro_tap>, <&tog MOU &kp LG(LS(SPACE))>; // default shortcut for homerow hints (https://www.homerow.app) for faster clicking without a mouse
		};
		
		glhf: good_luck_have_fun {
			compatible = "zmk,behavior-macro";
			label = "Comraderie in AOE";
			wait-ms = <35>;
			tap-ms = <20>;
			#binding-cells = <0>;
			bindings = <&macro_tap>, <&kp ENTER &kp G &kp O &kp O &kp D &kp SPACE &kp L &kp U &kp C &kp K &kp COMMA &kp SPACE &kp H &kp A &kp V &kp E &kp SPACE &kp F &kp U &kp N &kp EXCL &kp ENTER>;
		};
		
	};
	
	conditional_layers {
		compatible = "zmk,conditional-layers";

		tri_layer_for_function_and_number_row_keys {
			if-layers = <NAV SYM>;
			then-layer = <FUN>;
		};
		
		tri_layer_for_mod_tapping {
			if-layers = <NNV NSY>;
			then-layer = <FUN>;
		};
	};
	
	keymap {
		compatible = "zmk,keymap";

		default_with_home_row_mods {
			bindings = <
			&kp Q        &kp W  	&kp E  		&kp R    		&kp T       &kp Y      &kp U    	&kp I      	&kp O    	&kp P
			&ml LCTRL A  &ml LALT S	&ml LSHFT D	&ml LGUI F		&kp G       &kp H      &mr RGUI J	&mr RSHFT K	&mr RALT L	&mr RCTRL SQT
			&ml GLOBE Z  &kp X  	&kp C  		&kp V    		&kp B       &kp N      &kp M    	&kp COMMA  	&kp DOT  	&mr GLOBE SEMI
                                    	   		&lt NNV ESC  	&shft_cw    &kp SPACE  &lt SYM BSPC
			>;
		};

		default_callum_style_mods {
			bindings = <
			&kp Q        &kp W  &kp E  &kp R    &kp T       &kp Y      &kp U    &kp I      &kp O    &kp P
			&kp A        &kp S  &kp D  &kp F    &kp G       &kp H      &kp J    &kp K      &kp L    &kp SQT
			&mt GLOBE Z  &kp X  &kp C  &kp V    &kp B       &kp N      &kp M    &kp COMMA  &kp DOT  &mt GLOBE SEMI
                                       &lt NAV  &shft_cw    &kp SPACE  &lt NSY
			>;
		};
		
		numpad {
			bindings = <
			&kp FSLH	&kp N7  &kp N8  &kp N9	&kp COLON	&trans  &trans	&trans	&trans	&trans
			&kp N0		&kp N4  &kp N5  &kp N6	&sl SYM		&trans  &trans	&trans	&trans	&trans
			&kp COMMA	&kp N1  &kp N2  &kp N3	&kp DOT		&trans  &trans	&trans	&trans	&trans
										&trans	&tog NUM	&trans	&trans
			>;
		};
		
		navigation_editing_and_media_controls {
			bindings = <
			&kp TAB			&swapper	&kp LS(LC(TAB))	&kp LC(TAB)	&kp LG(RBKT)	&kp PG_UP	&kp HOME			&kp UP		&kp END		&kp BSPC
			&sk LCTRL		&sk LALT	&sk RSHFT		&sk LGUI	&kp LG(LBKT)	&kp PG_DN	&kp LEFT			&kp DOWN	&kp RIGHT	&kp RET
			&mt GLOBE LG(Z)	&kp LG(X)	&kp LG(C)		&kp LG(V)	&kp F18			&playnp		&kp LS(LG(SPACE))	&vb_dn  	&vb_up		&kp DEL
														&trans		&trans			&trans		&trans
			>;
		};
		
		symbols {
			bindings = <
			&kp ESC		&kp LBRC	&kp LBKT	&kp LPAR   	&kp PIPE		&kp AMPS	&kp RPAR	&kp RBKT	&kp RBRC 	&kp DQT
			&kp MINUS	&kp CARET	&kp GRAVE	&kp TILDE	&kp DOLLAR		&kp HASH   	&sk RGUI	&sk LSHFT	&sk RALT	&sk RCTRL
			&kp PLUS	&kp EQUAL	&kp ASTRK	&kp FSLH   	&kp PRCNT		&kp AT		&kp BSLH	&kp QMARK	&kp EXCL	&kp COLON
			                            	 	&trans		&lt RSHFT UNDER	&trans	 	&trans
			>;
		};
		
		function_and_number_row {
			bindings = <
			&kp N1     &kp N2    &kp N3     &kp N4    &kp N5        &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
			&sk LCTRL  &sk LALT  &sk RSHFT  &sk LGUI  &kp F11       &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL 
			&kp F1     &kp F2    &kp F3     &kp F4    &kp F5        &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
			                                &trans    &kp LG(LC(Q))	&kp CAPS  &trans
			>;
		};
		
		mouse_movement_and_editing_with_mouse {
			bindings = <
			&kp ESC			&kp LC(UP)	&kp LS(LC(TAB))	&kp LC(TAB)	&kp BSPC	&msc SCRL_DOWN  &msc SCRL_RIGHT  &mmv MOVE_UP	&msc SCRL_LEFT	&kp BSPC
			&kp LCTRL		&kp LALT	&kp LSHFT		&kp LCMD	&kp ENTER	&msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN	&mmv MOVE_RIGHT	&kp ENTER
			&mt GLOBE LG(Z)	&kp LG(X)	&kp LG(C)		&kp LG(V)	&kp F18		&kp LC(LEFT)	&m2hr			 &mkp MB3		&kp LC(RIGHT)	&kp DEL
														&tog MOU	&kp SPACE	&mkp MB1        &mkp MB2
			>;
		};

        aoe_default_layer {
            bindings = <
            &kp Q        &kp W       &kp E        &kp R        &kp T		&trans  &trans  &trans  &trans  &trans
            &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G		&trans  &trans  &trans  &trans  &trans
            &lt NAV Z    &kp X       &kp C        &kp V        &kp B		&trans  &trans  &trans  &trans  &trans
                                                  &lt AGS H    &lt ABS DOT	&trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
            &kp N1        &kp N2       &kp N3        &kp N4        &kp N5	&trans  &trans  &trans  &trans  &kp BSPC
            &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8  &mt LCTRL N9  &kp N0	&trans  &trans  &trans  &trans  &kp ENTER
            &kp COMMA     &kp BSPC     &kp SPACE     &kp ENTER     &kp H	&trans  &trans  &trans  &trans  &trans
                                                     &trans        &kp DEL	&trans  &trans
            >;
        };

        aoe_building_selection {
            bindings = <
            &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LS(COMMA)	&trans  &trans  &trans  &trans  &trans
            &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(LC(D))	&trans  &trans  &trans  &trans  &trans
            &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))	&trans  &trans  &trans  &trans  &trans
                                                         &trans         &trans			&trans  &trans
            >;
        };

		num_nav_mod_tapping {
			bindings = <
			&kp FSLH	&kp N7  &kp N8  &kp N9	&kp COLON	&kp PG_UP	&kp HOME	&kp UP	&kp END	&kp BSPC
			HRML (N0,	N4,		N5,		N6)		&sl SYM		&kp PG_DN	HRMR(LEFT,	DOWN,	RIGHT,	RET)
			&kp COMMA	&kp N1  &kp N2  &kp N3	&kp DOT		&kp ESC		&playnp		&vb_dn	&vb_up	&kp DEL
										&trans	&trans		&trans		&trans
			>;
		};

		full_sym_mod_tapping {
			bindings = <
			&kp ESC		&kp AT		&kp LA(N9)	&kp LA(N0)	&kp PIPE		&kp AMPS	&kp RPAR	&kp RBKT	&kp RBRC 	&kp DQT
			HRML(MINUS,	CARET,		GRAVE,		TILDE)		&kp DOLLAR		&kp HASH   	HRMR(LPAR, 	LBKT,		LBRC,		LA(N6))
			&kp PLUS	&kp EQUAL	&kp ASTRK	&kp FSLH   	&kp PRCNT		&kp UNDER	&kp BSLH	&kp QMARK	&kp EXCL	&kp COLON
			                            	 	&trans		&lt RSHFT UNDER	&trans	 	&trans
			>;
		};
	};
};