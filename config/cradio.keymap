#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NWD 1
#define NAV 2
#define FUN 3
#define AOE 4
#define ASG 5
#define ASB 6

&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // adding LSHFT is required to use some dead keys for diacriticals in PT-BR  (such as ~, ` and ^). This makes RSHFT a better candidate for my thumb key, as it can cancel &capsword on activation
};

&sk { quick-release; }; // avoids "THis" problem
&lt { flavor = "hold-preferred"; }; // Using them in NWD and AOE layers
&mt { flavor = "balanced"; }; // Globe/fn and AOE layers
/ {
    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <1 2>;
        };

        enter_combo {
            bindings = <&kp ENTER>;
            timeout-ms = <20>;
            require-prior-idle-ms = <210>;
            layers = <2 1>;
            key-positions = <2 3>;
        };

        backspace_combo {
            bindings = <&kp BSPC>;
            timeout-ms = <20>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <6 7>;
        };

        del_combo {
            bindings = <&kp DEL>;
            timeout-ms = <20>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <7 8>;
        };

        tab_combo {
            bindings = <&hrml LA(LSHFT) TAB>;
            timeout-ms = <20>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <11 12>;
        };

        left_parenthesis_combo {
            bindings = <&hrml RG(LSHFT) LPAR>;
            require-prior-idle-ms = <200>;
            timeout-ms = <25>;
            layers = <0 2 1>;
            key-positions = <16 17>;
        };

        right_parenthesis_combo {
            bindings = <&hrml RG(LSHFT) RPAR>;
            timeout-ms = <25>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <17 18>;
        };

        cut_combo {
            bindings = <&kp LG(X)>;
            timeout-ms = <25>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <21 23>;
        };

        copy_combo {
            bindings = <&kp LG(C)>;
            timeout-ms = <25>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <21 22>;
        };

        paste_combo {
            bindings = <&kp LG(V)>;
            timeout-ms = <25>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <22 23>;
        };

        left_bracket_combo {
            bindings = <&kp LBKT>;
            timeout-ms = <25>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <26 27>;
        };

        right_bracket_combo {
            bindings = <&kp RBKT>;
            timeout-ms = <25>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <27 28>;
        };

        // Vertical symbols combo

        exclamation_combo {
            bindings = <&kp EXCL>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <0 10>;
        };

        at_combo {
            bindings = <&kp AT>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <1 11>;
        };

        hash_combo {
            bindings = <&kp HASH>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <2 12>;
        };

        dollar_combo {
            bindings = <&kp DLLR>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 1>;
            key-positions = <3 13>;
        };

        tilde_combo {
            bindings = <&kp TILDE>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <4 14>;
        };

        circumflex_combo {
            bindings = <&kp CARET>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <5 15>;
        };

        plus_combo {
            bindings = <&kp PLUS>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <6 16>;
        };

        asterisk_combo {
            bindings = <&kp ASTRK>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <7 17>;
        };

        anpersand_combo {
            bindings = <&kp AMPS>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <8 18>;
        };

        question_mark_combo {
            bindings = <&kp QMARK>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <9 19>;
        };

        grave_combo {
            bindings = <&kp GRAVE>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <11 21>;
        };

        bachslash_combo {
            bindings = <&kp BSLH>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <12 22>;
        };

        equal_combo {
            bindings = <&kp EQUAL>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <13 23>;
        };

        percent_combo {
            bindings = <&kp PRCNT>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <14 24>;
        };

        underscore_combo {
            bindings = <&kp UNDER>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <15 25>;
        };

        hyphen_combo {
            bindings = <&kp MINUS>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <16 26>;
        };

        slash_combo {
            bindings = <&kp SLASH>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <17 27>;
        };

        pipe_combo {
            bindings = <&kp PIPE>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
            layers = <0 2 1>;
            key-positions = <18 28>;
        };

        // Special layer toggles

        nav_media_mute_combo {
            key-positions = <25 27>;
            require-prior-idle-ms = <200>;
            layers = <2>;
            bindings = <&kp C_MUTE>;
        };

        toggle_nav_combo {
            key-positions = <30 31>;
            require-prior-idle-ms = <200>;
            layers = <0 2>;
            bindings = <&tog 2>;
        };

        numword_combo {
            key-positions = <32 33>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            bindings = <&numword>;
        };

        capsword_combo {
            key-positions = <12 17>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            bindings = <&caps_word>;
        };

        // Keyboard adjustments combos (replaces a dedicated SYS layer)

        sys_bootloader {
            key-positions = <20 21>;
            layers = <3>;
            bindings = <&bootloader>;
        };

        sys_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <3>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <3>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <3>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <3>;
            bindings = <&bt BT_CLR>;
        };

        emoji_picker {
            bindings = <&kp LC(LG(SPACE))>;
            key-positions = <10 20>;
            require-prior-idle-ms = <200>;
            timeout-ms = <30>;
            layers = <0>;
        };

        media_forward {
            bindings = <&kp C_AC_FORWARD>;
            key-positions = <26 27>;
            layers = <2>;
            require-prior-idle-ms = <200>;
        };

        media_prev {
            bindings = <&kp C_PREV>;
            key-positions = <25 26>;
            layers = <2>;
        };
    };

    behaviors {
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        playnextprev: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREVIOUS";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        numword: numword {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word (PR #1451)
            label = "NUMWORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <NWD>;
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI LSHFT COLON SLASH PLUS MINUS ASTRK EQUAL RCMD RCTRL RALT>; // RSHFT tap on left thumb will cancel without entering any other character
            ignore-numbers;
        };

        // mod-taps fine tunned for home-row mods usage, inspired by urob's repo

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>; // right-side + thumbs
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>; // left-side + thumbs
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
        };

        hpmt: hold_preferred_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HPMT";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <200>;
            #binding-cells = <2>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
        };

        lc_nw: numword_on_tap_num_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LC_NW";
            bindings = <&lc>, <&numword>;

            tapping-term-ms = <200>;
            #binding-cells = <2>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
        };
    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
  &kp Q          &kp W         &kp E          &kp R         &kp T                       &kp Y                          &kp U         &kp I          &kp O         &kp P
  &hrml LCTRL A  &hrml LALT S  &hrml LSHFT D  &hrml LGUI F  &hrml LS(LA(LC(LGUI))) G    &hrmr RS(RA(RC(RIGHT_GUI))) H  &hrmr RGUI J  &hrmr LSHFT K  &hrmr RALT L  &hrmr RCTRL SQT
  &hrml GLOBE Z  &kp X         &kp C          &kp V         &kp B                       &kp N                          &kp M         &kp COMMA      &kp DOT       &kp SEMI
                                              &lc 2         &hpmt RSHFT ENTER           &kp SPACE                      &lc_nw 1 0
            >;
        };

        numpad_layer {
            bindings = <
  &kp DOT    &kp N7  &kp N8  &kp N9    &kp COMMA    &trans  &trans          &trans     &trans    &trans
  &kp MINUS  &kp N4  &kp N5  &kp N6    &kp SLASH    &trans  &sk RGUI        &sk LSHFT  &sk RALT  &sk RCTRL
  &kp PLUS   &kp N1  &kp N2  &kp N3    &kp ASTRK    &trans  &trans          &trans     &trans    &trans
                             &lt 2 N0  &kp RSHFT    &trans  &lt 3 K_CANCEL
            >;
        };

        navigation_and_media_layer {
            bindings = <
  &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp LG(RBKT)    &kp PG_UP     &kp HOME       &kp UP            &kp END            &kp BSPC
  &sk LCTRL        &sk LALT   &sk LSHFT        &sk LCMD     &kp LG(LBKT)    &kp PG_DN     &kp LEFT       &kp DOWN          &kp RIGHT          &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &kp ESC         &kp C_VOL_DN  &playnextprev  &kp LG(C_VOL_UP)  &kp LG(LS(SPACE))  &kp DEL
                                               &trans       &kp ESC         &trans        &lc 3
            >;
        };

        function_and_number_row {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &trans     &trans   &trans
            >;
        };
    };
};
