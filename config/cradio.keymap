#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors/num_word.dtsi>

#define DEF 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4
#define AOE 5 // layers for playing Age of Empires II Definitive Edition
#define AGS 6
#define ABS 7

&sk {
	quick-release; // Avoids "THis" problem (double capitalization)
	release-after-ms = <86400000>;// Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE DELETE LSHFT SQT CARET TILDE GRAVE>; }; // separators + K_CANCEL for &lc macro + LSHFT for PT-BR diacriticals dead keys. This makes RSHFT a thumb key that will &caps_word.

&mt { flavor = "balanced"; }; // Using these for GLOBE keys and faster window management with Swish app as well as AOE layers

/ {
	combos {
		compatible = "zmk,combos";
		
		left_hand_esc {
			bindings = <&kp ESCAPE>;
			key-positions = <0 10>;
			require-prior-idle-ms = <200>;
		};
				
		left_hand_enter {
			bindings = <&kp ENTER>;
			key-positions = <3 13>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_backspace {
			bindings = <&kp BSPC>;
			key-positions = <4 14>;
			require-prior-idle-ms = <200>;
		};
		
		left_hand_delete {
			bindings = <&kp DEL>;
			key-positions = <14 24>;
			require-prior-idle-ms = <200>;
		};
		
		toggle_nav_layer {
			key-positions = <30 31>;
			bindings = <&tog NAV>;
			layers = <DEF NAV>;
		};

		sticky_sym_layer {
			key-positions = <32 33>;
			bindings = <&sl SYM>;
			layers = <DEF>;
		};

		toggle_num_word {
			key-positions = <12 30>;
			bindings = <&num_word NUM>;
			layers = <DEF NUM>;
		};
		
		toggle_caps_word {
			key-positions = <31 32>;
			bindings = <&caps_word>;
			layers = <DEF>;
		};
	
		toggle_aoe_layers {
            key-positions = <20 21 22>;
            bindings = <&tog AOE>;
			layers = <DEF AOE>;
        };

		sys_bootloader {
			key-positions = <20 21>;
			bindings = <&bootloader>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt0 {
			key-positions = <3 4>;
			bindings = <&bt BT_SEL 0>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt1 {
			key-positions = <13 14>;
			bindings = <&bt BT_SEL 1>;
			layers = <FUN>;
		};
		
		sys_connect_to_bt2 {
			key-positions = <23 24>;
			bindings = <&bt BT_SEL 2>;
			layers = <FUN>;
		};
		
		sys_clear_current_bluetooth_profile {
			key-positions = <28 29>;
			bindings = <&bt BT_CLR>;
			layers = <FUN>;
		};
		
	};
	
	behaviors {
			
		playnp: play_next_previous_media_key {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <300>;
			bindings = <&mt C_MUTE C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
		};
		
		vb_up: volume_brightness_up_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;
            mods = <(MOD_LCTL)>;
        };

        vb_dn: volume_brightness_down_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;
            mods = <(MOD_LCTL)>;
        };
        
		swapper: swapper_for_apple_cmd_tab {
			compatible = "zmk,behavior-tri-state";// requires tri-state module (https://github.com/urob/zmk-tri-state)
			#binding-cells = <0>;
			bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>; // For Windows alt-tab, need to replace RGUI for LALT
			ignored-key-positions = <7 16 17 18 9 19 29>;// Arrows and BSPC, ENTER and DEL
		};

	};
	
	macros {
		lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
			compatible = "zmk,behavior-macro-one-param";
			label = "mo_layer/cancel";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <1>;
			bindings =
			<&macro_tap>,
			<&kp K_CANCEL &macro_param_1to1>,
			<&macro_press>,
			<&mo MACRO_PLACEHOLDER>,
			<&macro_pause_for_release>,
			<&macro_param_1to1>,
			<&macro_release>,
			<&mo MACRO_PLACEHOLDER>;
		};
	
	};
	
	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer_for_function_and_number_row_keys {
			if-layers = <NAV SYM>;
			then-layer = <FUN>;
		};
	};
	
	keymap {
		compatible = "zmk,keymap";

		default {
			bindings = <
			&kp Q        &kp W  &kp E  &kp R    &kp T       &kp Y      &kp U    &kp I      &kp O    &kp P
			&kp A        &kp S  &kp D  &kp F    &kp G       &kp H      &kp J    &kp K      &kp L    &kp SQT
			&mt GLOBE Z  &kp X  &kp C  &kp V    &kp B       &kp N      &kp M    &kp COMMA  &kp DOT  &mt GLOBE SEMI
                                       &lc NAV  &kp RSHFT	&kp SPACE  &lc SYM
			>;
		};

		numpad {
			bindings = <
			&trans		&kp N7  &kp N8  &kp N9	&kp COLON	&trans  &trans	&trans	&trans	&trans
			&kp N0		&kp N4  &kp N5  &kp N6	&sl SYM		&trans  &trans	&trans	&trans	&trans
			&kp COMMA	&kp N1  &kp N2  &kp N3	&kp DOT		&trans  &trans	&trans	&trans	&trans
										&trans	&tog NUM	&trans	&trans
			>;
		};


		navigation_editing_and_media_controls {
			bindings = <
			&kp TAB			&swapper	&kp LS(LC(TAB))	&kp LC(TAB)	&kp LG(RBKT)	&kp PG_UP		&mt	HOME LA(LEFT) 	&kp UP		&mt END LA(RIGHT)	&kp BSPC
			&sk LCTRL		&sk LALT	&sk RSHFT		&sk LGUI	&kp LG(LBKT)	&kp PG_DN		&kp LEFT			&kp DOWN	&kp RIGHT			&kp RET
			&mt GLOBE LG(Z)	&kp LG(X)	&kp LG(C)		&kp LG(V)	&kp F18			&playnp			&kp LG(SPACE)		&vb_dn	  	&vb_up				&kp DEL
														&trans		&mt RSHFT SPACE	&mt RSHFT SPACE	&trans
			>;
		};
		
		symbols {
			bindings = <
			&kp ESC		&kp LBRC	&kp LBKT	&kp LPAR   	&kp PIPE		&kp AMPS	&kp RPAR	&kp RBKT	&kp RBRC 	&kp DQT
			&kp MINUS	&kp CARET	&kp GRAVE	&kp TILDE	&kp DOLLAR		&kp HASH   	&sk RGUI	&sk LSHFT	&sk RALT	&sk RCTRL
			&kp PLUS	&kp EQUAL	&kp ASTRK	&kp FSLH   	&kp PRCNT		&kp AT		&kp BSLH	&kp QMARK	&kp EXCL	&kp COLON
			                            	 	&trans		&mt RSHFT UNDER	&trans	 	&trans
			>;
		};
		
		function_and_number_row {
			bindings = <
			&kp N1     &kp N2    &kp N3     &kp N4    &kp N5        &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
			&sk LCTRL  &sk LALT  &sk RSHFT  &sk LGUI  &kp F11       &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL 
			&kp F1     &kp F2    &kp F3     &kp F4    &kp F5        &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
			                                &trans    &kp LG(LC(Q))	&kp CAPS  &trans
			>;
		};

        aoe_default_layer {
            bindings = <
            &kp Q        &kp W       &kp E        &kp R        &kp T		&trans  &trans  &trans  &trans  &trans
            &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G		&trans  &trans  &trans  &trans  &trans
            &lt NAV Z    &kp X       &kp C        &kp V        &kp B		&trans  &trans  &trans  &trans  &trans
                                                  &lt AGS H    &lt ABS DOT	&trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
            &kp N1        &kp N2       &kp N3        &kp N4        &kp N5	&trans  &trans  &trans  &trans  &kp BSPC
            &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8  &mt LCTRL N9  &kp N0	&trans  &trans  &trans  &trans  &kp ENTER
            &kp COMMA     &kp BSPC     &kp SPACE     &kp ENTER     &kp H	&trans  &trans  &trans  &trans  &kp F3
                                                     &trans        &kp DEL	&trans  &trans
            >;
        };

        aoe_building_selection {
            bindings = <
            &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LS(COMMA)	&trans  &trans  &trans  &trans  &trans
            &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(LC(D))	&trans  &trans  &trans  &trans  &trans
            &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))	&trans  &trans  &trans  &trans  &trans
                                                         &trans         &trans			&trans  &trans
            >;
        };
	};
};